// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	restapi "github.com/andyfilya/restapi"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// NewUser mocks base method.
func (m *MockAuthorization) NewUser(user restapi.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUser indicates an expected call of NewUser.
func (mr *MockAuthorizationMockRecorder) NewUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUser", reflect.TypeOf((*MockAuthorization)(nil).NewUser), user)
}

// NewUserToken mocks base method.
func (m *MockAuthorization) NewUserToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUserToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUserToken indicates an expected call of NewUserToken.
func (mr *MockAuthorizationMockRecorder) NewUserToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUserToken", reflect.TypeOf((*MockAuthorization)(nil).NewUserToken), username, password)
}

// ParseAdminToken mocks base method.
func (m *MockAuthorization) ParseAdminToken(authToken string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseAdminToken", authToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAdminToken indicates an expected call of ParseAdminToken.
func (mr *MockAuthorizationMockRecorder) ParseAdminToken(authToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAdminToken", reflect.TypeOf((*MockAuthorization)(nil).ParseAdminToken), authToken)
}

// ParseUserToken mocks base method.
func (m *MockAuthorization) ParseUserToken(authToken string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseUserToken", authToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUserToken indicates an expected call of ParseUserToken.
func (mr *MockAuthorizationMockRecorder) ParseUserToken(authToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUserToken", reflect.TypeOf((*MockAuthorization)(nil).ParseUserToken), authToken)
}

// MockActor is a mock of Actor interface.
type MockActor struct {
	ctrl     *gomock.Controller
	recorder *MockActorMockRecorder
}

// MockActorMockRecorder is the mock recorder for MockActor.
type MockActorMockRecorder struct {
	mock *MockActor
}

// NewMockActor creates a new mock instance.
func NewMockActor(ctrl *gomock.Controller) *MockActor {
	mock := &MockActor{ctrl: ctrl}
	mock.recorder = &MockActorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActor) EXPECT() *MockActorMockRecorder {
	return m.recorder
}

// ChangeActor mocks base method.
func (m *MockActor) ChangeActor(oldActor, newActor restapi.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeActor", oldActor, newActor)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeActor indicates an expected call of ChangeActor.
func (mr *MockActorMockRecorder) ChangeActor(oldActor, newActor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeActor", reflect.TypeOf((*MockActor)(nil).ChangeActor), oldActor, newActor)
}

// CreateActor mocks base method.
func (m *MockActor) CreateActor(actor restapi.Actor) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", actor)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockActorMockRecorder) CreateActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockActor)(nil).CreateActor), actor)
}

// DeleteActor mocks base method.
func (m *MockActor) DeleteActor(actor restapi.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", actor)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorMockRecorder) DeleteActor(actor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActor)(nil).DeleteActor), actor)
}

// FindActorFilm mocks base method.
func (m *MockActor) FindActorFilm(actorFragments restapi.ActorFragment) ([]restapi.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActorFilm", actorFragments)
	ret0, _ := ret[0].([]restapi.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActorFilm indicates an expected call of FindActorFilm.
func (mr *MockActorMockRecorder) FindActorFilm(actorFragments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActorFilm", reflect.TypeOf((*MockActor)(nil).FindActorFilm), actorFragments)
}

// MockFilm is a mock of Film interface.
type MockFilm struct {
	ctrl     *gomock.Controller
	recorder *MockFilmMockRecorder
}

// MockFilmMockRecorder is the mock recorder for MockFilm.
type MockFilmMockRecorder struct {
	mock *MockFilm
}

// NewMockFilm creates a new mock instance.
func NewMockFilm(ctrl *gomock.Controller) *MockFilm {
	mock := &MockFilm{ctrl: ctrl}
	mock.recorder = &MockFilmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilm) EXPECT() *MockFilmMockRecorder {
	return m.recorder
}

// ActorsFilm mocks base method.
func (m *MockFilm) ActorsFilm(filmid int) ([]restapi.Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActorsFilm", filmid)
	ret0, _ := ret[0].([]restapi.Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActorsFilm indicates an expected call of ActorsFilm.
func (mr *MockFilmMockRecorder) ActorsFilm(filmid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActorsFilm", reflect.TypeOf((*MockFilm)(nil).ActorsFilm), filmid)
}

// AddActorToFilm mocks base method.
func (m *MockFilm) AddActorToFilm(actorId, filmId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActorToFilm", actorId, filmId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddActorToFilm indicates an expected call of AddActorToFilm.
func (mr *MockFilmMockRecorder) AddActorToFilm(actorId, filmId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActorToFilm", reflect.TypeOf((*MockFilm)(nil).AddActorToFilm), actorId, filmId)
}

// ChangeFilm mocks base method.
func (m *MockFilm) ChangeFilm(newFilm, oldFilm restapi.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeFilm", newFilm, oldFilm)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeFilm indicates an expected call of ChangeFilm.
func (mr *MockFilmMockRecorder) ChangeFilm(newFilm, oldFilm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeFilm", reflect.TypeOf((*MockFilm)(nil).ChangeFilm), newFilm, oldFilm)
}

// CreateFilm mocks base method.
func (m *MockFilm) CreateFilm(actorId int, film restapi.Film) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilm", actorId, film)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilm indicates an expected call of CreateFilm.
func (mr *MockFilmMockRecorder) CreateFilm(actorId, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilm", reflect.TypeOf((*MockFilm)(nil).CreateFilm), actorId, film)
}

// CreateFilmActors mocks base method.
func (m *MockFilm) CreateFilmActors(actorIds []int, film restapi.Film) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilmActors", actorIds, film)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilmActors indicates an expected call of CreateFilmActors.
func (mr *MockFilmMockRecorder) CreateFilmActors(actorIds, film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilmActors", reflect.TypeOf((*MockFilm)(nil).CreateFilmActors), actorIds, film)
}

// CreateFilmWithoutActor mocks base method.
func (m *MockFilm) CreateFilmWithoutActor(film restapi.Film) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFilmWithoutActor", film)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFilmWithoutActor indicates an expected call of CreateFilmWithoutActor.
func (mr *MockFilmMockRecorder) CreateFilmWithoutActor(film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFilmWithoutActor", reflect.TypeOf((*MockFilm)(nil).CreateFilmWithoutActor), film)
}

// DeleteFilm mocks base method.
func (m *MockFilm) DeleteFilm(film restapi.Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", film)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockFilmMockRecorder) DeleteFilm(film interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockFilm)(nil).DeleteFilm), film)
}

// GetAllFilms mocks base method.
func (m *MockFilm) GetAllFilms() ([]restapi.Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFilms")
	ret0, _ := ret[0].([]restapi.Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFilms indicates an expected call of GetAllFilms.
func (mr *MockFilmMockRecorder) GetAllFilms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFilms", reflect.TypeOf((*MockFilm)(nil).GetAllFilms))
}
